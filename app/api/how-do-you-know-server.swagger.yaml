openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - App
  /dev-debug:
    post:
      operationId: DevDebugController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDevDebugDto"
      responses:
        "201":
          description: ""
      tags:
        - DevDebug
    get:
      operationId: DevDebugController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - DevDebug
  /dev-debug/questions:
    get:
      operationId: DevDebugController_getQuestions
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - DevDebug
  /dev-debug/user-answers:
    get:
      operationId: DevDebugController_getUserAnswers
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - DevDebug
    post:
      operationId: DevDebugController_setUserAnswers
      parameters: []
      responses:
        "201":
          description: ""
      tags:
        - DevDebug
  /dev-debug/auth/user-answers/questionnaire:
    get:
      operationId: DevDebugController_getQuestionnaireAuth
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - DevDebug
  /dev-debug/user-answers/questionnaire:
    get:
      operationId: DevDebugController_getQuestionnaire
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - DevDebug
  /dev-debug/{id}:
    get:
      operationId: DevDebugController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - DevDebug
    patch:
      operationId: DevDebugController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDevDebugDto"
      responses:
        "200":
          description: ""
      tags:
        - DevDebug
    delete:
      operationId: DevDebugController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - DevDebug
  /auth/login:
    post:
      operationId: AuthController_signIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Function"
      responses:
        "200":
          description: Returns JWT access token
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    type: string
      summary: Sign in to get access token
      tags:
        - auth
  /auth/logout:
    post:
      operationId: AuthController_signOut
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Function"
      responses:
        "200":
          description: Successfully signed out
      security:
        - bearer: []
      summary: Sign out
      tags:
        - auth
  /auth/profile:
    get:
      description: Retrieves the authenticated user's profile information
      operationId: AuthController_getProfile
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileResponseDto"
      responses:
        "200":
          description: Returns the user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponseDto"
        "401":
          description: Unauthorized - Invalid or missing JWT token
      security:
        - bearer: []
      summary: Get user profile
      tags:
        - auth
    post:
      description: Updates the authenticated user's profile information
      operationId: AuthController_updateUserProfile
      parameters: []
      requestBody:
        required: true
        description: Profile update data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileDto"
            examples:
              example1:
                summary: Profile Update Example
                description: A sample profile update request
                value:
                  firstName: John
                  lastName: Doe
                  email: john.doe@example.com
      responses:
        "200":
          description: Returns the updated user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponseDto"
        "400":
          description: Bad Request - Invalid input data
        "401":
          description: Unauthorized - Invalid or missing JWT token
      security:
        - bearer: []
      summary: Update user profile
      tags:
        - auth
info:
  title: How Do You Know API
  description: The How Do You Know API description
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    CreateDevDebugDto:
      type: object
      properties: {}
    UpdateDevDebugDto:
      type: object
      properties: {}
    Function:
      type: object
      properties: {}
    ProfileResponseDto:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        roles:
          type: array
          items:
            type: string
      required:
        - username
        - firstName
        - lastName
        - email
        - createdAt
        - updatedAt
        - roles
    UpdateProfileDto:
      type: object
      properties:
        displayName:
          type: string
          description: The user's display name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: john@example.com
