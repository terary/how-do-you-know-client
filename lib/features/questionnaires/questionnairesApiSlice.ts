// Need to use the React-specific entry point to import `createApi`
import { TQuestionAny } from "@/app/questionnaires/types";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface QuestionnaireApiResponse {
  questions: TQuestionAny[];
  total: number;
  skip: number;
  limit: number;
}

// Define a service using a base URL and expected endpoints
export const questionnairesApiSlice = createApi({
  // baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com/quotes" }),
  baseQuery: fetchBaseQuery({
    baseUrl: "http://localhost:3001/dev-debug/questions",
    isJsonContentType: () => true,
  }),

  reducerPath: "questionnairesApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Questions"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getQuestions: build.query<QuestionnaireApiResponse, number>({
      query: (limit = 10) => `?limit=${limit}`,

      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Questions", id, error }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
//export const { useGetQuotesQuery } = quotesApiSlice;
export const { useGetQuestionsQuery } = questionnairesApiSlice;
