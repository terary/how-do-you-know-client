// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import type {
  TQuestionAny,
  TUserResponseType,
} from "../../../app/questionnaires/types";
import { UserResponse } from "@/app/components/questionnaires/UserResponse";
// -------------

interface QuestionnaireApiResponse {
  questions: TQuestionAny[];
  total: number;
  skip: number;
  limit: number;
}

// -------------
type SetUserResponseRequest = {
  questionId: string;
  userResponseType: TUserResponseType;
  userResponse: {
    text?: string;
    selectedOptions?: string[];
  };
};

type TUserResponse = {
  questionId: string;
  userResponseType: TUserResponseType;
  userResponse: {
    text?: string;
    selectedOptions?: string[];
  };
};

interface UserAnswersApiResponse {
  UserResponses: TUserResponse[];
  total: number;
  skip: number;
  limit: number;
}

// interface QuestionnaireApiResponse {
//   questions: TQuestionAny[];
//   total: number;
//   skip: number;
//   limit: number;
// }

interface IGetQuestionnaireResponse {
  questionnaireId: string; // this isn't what it appears.  Still need to work-out "questionnaire" and "questionnaire instance"
  questions: TQuestionAny[];
  examMetaData?: {
    examId?: string;
    proctorIds?: string[];
  };
}

interface IGetQuestionnaireRequestParameters {
  questionnaireId?: string;
}

const initialState = { UserResponses: [], total: 0, skip: 0, limit: 0 };

`

    These seems to be working.

    Need to use this API to feed the questionnaire related component(s) then tear-out the questionnaireApi
    Backend will need to be updated to keep exam in memory (or start using the one there) and we should be **sending ids now**


    Let AI do some of this for you... if it's not a great place to use AI, make it a good place to use AI, then use AI

`;

// Define a service using a base URL and expected endpoints
export const userAnswersApiSlice = createApi({
  // baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com/quotes" }),
  baseQuery: fetchBaseQuery({
    // baseUrl: "http://predicatetree.com/questionnaires/questions.json",
    baseUrl: "http://localhost:3001/dev-debug/user-answers",
    // baseUrl: "http://localhost:3001/dev-debug/questions",

    isJsonContentType: () => true,
  }),

  // initialState: initialState,
  reducerPath: "userAnswersApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["UserAnswers", "questionnaire"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getUserAnswers: build.query<UserAnswersApiResponse, number>({
      query: (limit = 10) => `?limit=${limit}`,

      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "UserAnswers", id, error }],
    }),
    xgetQuestionnaire: build.query<QuestionnaireApiResponse, number>({
      query: (limit = 10) => `?limit=${limit}`,

      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [
        { type: "questionnaire", id, error },
      ],
    }),
    // getQuestionnaire: build.query<UserAnswersApiResponse, number>({
    getQuestionnaire: build.query<
      IGetQuestionnaireResponse,
      // number
      IGetQuestionnaireRequestParameters
    >({
      query: (params) => {
        const END_POINT = "/questionnaire";
        let paramString = END_POINT;
        if (params.questionnaireId) {
          return END_POINT + "?questionnaireId=" + params.questionnaireId;
        }
        return END_POINT;
      },

      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => {
        return [
          { type: "questionnaire", id: id.questionnaireId, error, result },
        ];
      },
    }),

    // Add new mutation endpoint
    setUserResponse: build.mutation<TUserResponse, SetUserResponseRequest>({
      query: (userResponse) => ({
        url: "", // Empty string means use the baseUrl
        method: "POST",
        body: userResponse,
      }),
      // Invalidate the UserAnswers cache when a new response is added
      invalidatesTags: ["UserAnswers"],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
//export const { useGetQuestionsQuery } = UserAnswersApiSlice;
export const {
  useGetUserAnswersQuery,
  useSetUserResponseMutation,
  useGetQuestionnaireQuery,
} = userAnswersApiSlice;
